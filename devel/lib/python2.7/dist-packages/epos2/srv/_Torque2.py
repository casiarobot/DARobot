# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from epos2/Torque2Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Torque2Request(genpy.Message):
  _md5sum = "17e6dad772ad9ca7bae7ae29b766a6e7"
  _type = "epos2/Torque2Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 position
float64 torque
float64 torque2
int16 init
"""
  __slots__ = ['position','torque','torque2','init']
  _slot_types = ['float64','float64','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,torque,torque2,init

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Torque2Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = 0.
      if self.torque is None:
        self.torque = 0.
      if self.torque2 is None:
        self.torque2 = 0.
      if self.init is None:
        self.init = 0
    else:
      self.position = 0.
      self.torque = 0.
      self.torque2 = 0.
      self.init = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dh().pack(_x.position, _x.torque, _x.torque2, _x.init))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.position, _x.torque, _x.torque2, _x.init,) = _get_struct_3dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dh().pack(_x.position, _x.torque, _x.torque2, _x.init))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.position, _x.torque, _x.torque2, _x.init,) = _get_struct_3dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dh = None
def _get_struct_3dh():
    global _struct_3dh
    if _struct_3dh is None:
        _struct_3dh = struct.Struct("<3dh")
    return _struct_3dh
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from epos2/Torque2Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Torque2Response(genpy.Message):
  _md5sum = "8718dd5d2b7096e10fababe2ce8b9b84"
  _type = "epos2/Torque2Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[3] state_new
float64 reward
bool done
float64 velocity
float64 position_new
float64 current

"""
  __slots__ = ['state_new','reward','done','velocity','position_new','current']
  _slot_types = ['float64[3]','float64','bool','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state_new,reward,done,velocity,position_new,current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Torque2Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state_new is None:
        self.state_new = [0.] * 3
      if self.reward is None:
        self.reward = 0.
      if self.done is None:
        self.done = False
      if self.velocity is None:
        self.velocity = 0.
      if self.position_new is None:
        self.position_new = 0.
      if self.current is None:
        self.current = 0.
    else:
      self.state_new = [0.] * 3
      self.reward = 0.
      self.done = False
      self.velocity = 0.
      self.position_new = 0.
      self.current = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.state_new))
      _x = self
      buff.write(_get_struct_dB3d().pack(_x.reward, _x.done, _x.velocity, _x.position_new, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.state_new = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 33
      (_x.reward, _x.done, _x.velocity, _x.position_new, _x.current,) = _get_struct_dB3d().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.state_new.tostring())
      _x = self
      buff.write(_get_struct_dB3d().pack(_x.reward, _x.done, _x.velocity, _x.position_new, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.state_new = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 33
      (_x.reward, _x.done, _x.velocity, _x.position_new, _x.current,) = _get_struct_dB3d().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dB3d = None
def _get_struct_dB3d():
    global _struct_dB3d
    if _struct_dB3d is None:
        _struct_dB3d = struct.Struct("<dB3d")
    return _struct_dB3d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class Torque2(object):
  _type          = 'epos2/Torque2'
  _md5sum = 'b256409bc2dd9c2e82d920e7b3046f49'
  _request_class  = Torque2Request
  _response_class = Torque2Response
