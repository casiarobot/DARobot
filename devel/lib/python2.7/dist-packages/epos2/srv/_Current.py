# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from epos2/CurrentRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CurrentRequest(genpy.Message):
  _md5sum = "2cb57acdbedfef217fb52a07505245b2"
  _type = "epos2/CurrentRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 position
int16 torque
"""
  __slots__ = ['position','torque']
  _slot_types = ['int32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,torque

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CurrentRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = 0
      if self.torque is None:
        self.torque = 0
    else:
      self.position = 0
      self.torque = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ih().pack(_x.position, _x.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.position, _x.torque,) = _get_struct_ih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ih().pack(_x.position, _x.torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.position, _x.torque,) = _get_struct_ih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ih = None
def _get_struct_ih():
    global _struct_ih
    if _struct_ih is None:
        _struct_ih = struct.Struct("<ih")
    return _struct_ih
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from epos2/CurrentResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CurrentResponse(genpy.Message):
  _md5sum = "f507fb6d316909e52211821daf76ac3a"
  _type = "epos2/CurrentResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 position_new
float64 reward
bool done
float64 velocity
int16 current

"""
  __slots__ = ['position_new','reward','done','velocity','current']
  _slot_types = ['int32','float64','bool','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_new,reward,done,velocity,current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CurrentResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position_new is None:
        self.position_new = 0
      if self.reward is None:
        self.reward = 0.
      if self.done is None:
        self.done = False
      if self.velocity is None:
        self.velocity = 0.
      if self.current is None:
        self.current = 0
    else:
      self.position_new = 0
      self.reward = 0.
      self.done = False
      self.velocity = 0.
      self.current = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_idBdh().pack(_x.position_new, _x.reward, _x.done, _x.velocity, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.position_new, _x.reward, _x.done, _x.velocity, _x.current,) = _get_struct_idBdh().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_idBdh().pack(_x.position_new, _x.reward, _x.done, _x.velocity, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.position_new, _x.reward, _x.done, _x.velocity, _x.current,) = _get_struct_idBdh().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_idBdh = None
def _get_struct_idBdh():
    global _struct_idBdh
    if _struct_idBdh is None:
        _struct_idBdh = struct.Struct("<idBdh")
    return _struct_idBdh
class Current(object):
  _type          = 'epos2/Current'
  _md5sum = '68a96870bd31b1576c888aa798fc5c02'
  _request_class  = CurrentRequest
  _response_class = CurrentResponse
