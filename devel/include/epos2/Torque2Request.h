// Generated by gencpp from file epos2/Torque2Request.msg
// DO NOT EDIT!


#ifndef EPOS2_MESSAGE_TORQUE2REQUEST_H
#define EPOS2_MESSAGE_TORQUE2REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace epos2
{
template <class ContainerAllocator>
struct Torque2Request_
{
  typedef Torque2Request_<ContainerAllocator> Type;

  Torque2Request_()
    : position(0.0)
    , torque(0.0)
    , torque2(0.0)
    , init(0)  {
    }
  Torque2Request_(const ContainerAllocator& _alloc)
    : position(0.0)
    , torque(0.0)
    , torque2(0.0)
    , init(0)  {
  (void)_alloc;
    }



   typedef double _position_type;
  _position_type position;

   typedef double _torque_type;
  _torque_type torque;

   typedef double _torque2_type;
  _torque2_type torque2;

   typedef int16_t _init_type;
  _init_type init;




  typedef boost::shared_ptr< ::epos2::Torque2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::epos2::Torque2Request_<ContainerAllocator> const> ConstPtr;

}; // struct Torque2Request_

typedef ::epos2::Torque2Request_<std::allocator<void> > Torque2Request;

typedef boost::shared_ptr< ::epos2::Torque2Request > Torque2RequestPtr;
typedef boost::shared_ptr< ::epos2::Torque2Request const> Torque2RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::epos2::Torque2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::epos2::Torque2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace epos2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::epos2::Torque2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::epos2::Torque2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::epos2::Torque2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::epos2::Torque2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::epos2::Torque2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::epos2::Torque2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::epos2::Torque2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17e6dad772ad9ca7bae7ae29b766a6e7";
  }

  static const char* value(const ::epos2::Torque2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17e6dad772ad9ca7ULL;
  static const uint64_t static_value2 = 0xbae7ae29b766a6e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::epos2::Torque2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "epos2/Torque2Request";
  }

  static const char* value(const ::epos2::Torque2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::epos2::Torque2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position\n\
float64 torque\n\
float64 torque2\n\
int16 init\n\
";
  }

  static const char* value(const ::epos2::Torque2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::epos2::Torque2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.torque);
      stream.next(m.torque2);
      stream.next(m.init);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Torque2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::epos2::Torque2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::epos2::Torque2Request_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "torque: ";
    Printer<double>::stream(s, indent + "  ", v.torque);
    s << indent << "torque2: ";
    Printer<double>::stream(s, indent + "  ", v.torque2);
    s << indent << "init: ";
    Printer<int16_t>::stream(s, indent + "  ", v.init);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EPOS2_MESSAGE_TORQUE2REQUEST_H
